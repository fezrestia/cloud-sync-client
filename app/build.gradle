apply plugin: 'com.android.application'

import java.util.regex.Pattern

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    defaultConfig {
        applicationId "com.fezrestia.android.cloudsyncclient"
        minSdkVersion 26
        targetSdkVersion 29
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            applicationIdSuffix = '.debug'
            versionNameSuffix = '-debug'
        }
    }

    task incrementVersionCode {
        def file = file("src/main/AndroidManifest.xml")
        def text = file.getText()

        // Update version code.
        def codePattern = Pattern.compile("android:versionCode=\"(\\d+)\"")
        def codeMatcher = codePattern.matcher(text)
        codeMatcher.find()
        def code = Integer.parseInt(codeMatcher.group(1))
        def newCode = code + 1
        def codeUpdatedText = codeMatcher.replaceAll("android:versionCode=\"" + newCode + "\"")

        // Update version name.
        def namePattern = Pattern.compile("android:versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)-\\d+\"")
        def nameMatcher = namePattern.matcher(codeUpdatedText)
        nameMatcher.find()
        def major = Integer.parseInt(nameMatcher.group(1))
        def minor = Integer.parseInt(nameMatcher.group(2))
        def patch = Integer.parseInt(nameMatcher.group(3))
        def newName = "android:versionName=\"" + major + "." + minor + "." + patch + "-" + newCode + "\""
        def nameUpdatedText = nameMatcher.replaceAll(newName)

        file.write(nameUpdatedText)
    }

    tasks.whenTaskAdded { task ->
        if (task.name == "generateReleaseBuildConfig" || task.name == "generateDebugBuildConfig") {
            task.dependsOn("incrementVersionCode")
        }
    }

    // Define APK name and replace.
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.outputFileName.endsWith(".apk")) {
                def name = getArchivesBaseName()
                def ver = variant.versionName

                if (variant.name == "release") {
                    output.outputFileName = "${name}_${ver}.apk"
                }
            }
        }
    }

    productFlavors {
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // Firebase.
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }
    implementation 'com.google.firebase:firebase-core:17.2.3'
    implementation 'androidx.preference:preference:1.1.0'
}

// For Firebase.
apply plugin: 'com.google.gms.google-services'
